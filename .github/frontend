<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>FastText AI Autocomplete Search</title>
  <style>
    /* Global Styles */
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Poppins', sans-serif;
    }
    body {
      background: linear-gradient(135deg, #ff9a9e 0%, #fad0c4 100%);
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      padding: 20px;
    }
    .container {
      width: 100%;
      max-width: 600px;
      background: rgba(255, 255, 255, 0.95);
      border-radius: 20px;
      box-shadow: 0 20px 50px rgba(0,0,0,0.2);
      padding: 30px;
      text-align: center;
    }
    h1 {
      font-size: 2.2rem;
      margin-bottom: 20px;
      color: #333;
      text-shadow: 1px 1px 2px rgba(0,0,0,0.2);
    }

    /* Search Input */
    .search-box {
      position: relative;
      margin-bottom: 20px;
    }
    #search {
      width: 100%;
      padding: 15px 20px;
      border-radius: 50px;
      border: 2px solid #ff6a88;
      outline: none;
      font-size: 1rem;
      transition: all 0.3s ease;
    }
    #search:focus {
      border-color: #ff99ac;
      box-shadow: 0 5px 20px rgba(255,105,135,0.3);
    }

    /* Suggestions List */
    #suggestions {
      list-style: none;
      margin-top: 10px;
      border-radius: 15px;
      overflow: hidden;
      max-height: 300px;
      overflow-y: auto;
      box-shadow: 0 5px 20px rgba(0,0,0,0.1);
    }
    #suggestions li {
      padding: 12px 20px;
      cursor: pointer;
      background: #fff;
      transition: all 0.2s ease;
      font-weight: 500;
      color: #444;
    }
    #suggestions li:hover {
      background: linear-gradient(90deg, #ff9a9e, #fad0c4);
      color: #fff;
      transform: translateX(10px);
    }
    #suggestions li span {
      font-weight: bold;
      color: #ff4b6e;
    }

    /* Scrollbar for suggestions */
    #suggestions::-webkit-scrollbar {
      width: 8px;
    }
    #suggestions::-webkit-scrollbar-thumb {
      background: #ff6a88;
      border-radius: 4px;
    }

    /* Footer */
    .footer {
      margin-top: 20px;
      font-size: 0.9rem;
      color: #555;
    }

    /* Responsive */
    @media (max-width: 640px) {
      .container {
        padding: 20px;
      }
      h1 {
        font-size: 1.8rem;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>FastText AI Autocomplete Search üîç</h1>
    <div class="search-box">
      <input type="text" id="search" placeholder="Start typing your query...">
      <ul id="suggestions"></ul>
    </div>
    <div class="footer">
      Powered by AI & Trie-based Autocomplete
    </div>
  </div>

  <script>
    const searchInput = document.getElementById("search");
    const suggestionsList = document.getElementById("suggestions");

    // Helper: Highlight matching prefix
    function highlightMatch(text, query) {
      const regex = new RegExp(`(${query})`, 'gi');
      return text.replace(regex, '<span>$1</span>');
    }

    // Fetch suggestions from backend API
    searchInput.addEventListener("input", async () => {
      const query = searchInput.value.trim();
      if (!query) {
        suggestionsList.innerHTML = "";
        return;
      }

      try {
        const response = await fetch(`/search?q=${query}`);
        const suggestions = await response.json();

        suggestionsList.innerHTML = "";
        suggestions.slice(0, 10).forEach(item => {
          const li = document.createElement("li");
          li.innerHTML = highlightMatch(item, query);
          li.onclick = () => searchInput.value = item;
          suggestionsList.appendChild(li);
        });
      } catch (err) {
        console.error("Error fetching suggestions:", err);
      }
    });

    // Keyboard navigation
    let selectedIndex = -1;
    searchInput.addEventListener("keydown", (e) => {
      const items = suggestionsList.querySelectorAll("li");
      if (!items.length) return;

      if (e.key === "ArrowDown") {
        selectedIndex = (selectedIndex + 1) % items.length;
        items.forEach((item, i) => item.style.background = i === selectedIndex ? "#ff9a9e" : "#fff");
      } else if (e.key === "ArrowUp") {
        selectedIndex = (selectedIndex - 1 + items.length) % items.length;
        items.forEach((item, i) => item.style.background = i === selectedIndex ? "#ff9a9e" : "#fff");
      } else if (e.key === "Enter" && selectedIndex >= 0) {
        searchInput.value = items[selectedIndex].textContent;
        suggestionsList.innerHTML = "";
        selectedIndex = -1;
      }
    });
  </script>
</body>
</html>
